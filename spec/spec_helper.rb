# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.before(:all) { 
      @country1 = Country.new(name: 'Colombia', cod: 'COL')
      @country1.save
      @country2 = Country.new(name: 'Argentina', cod: 'ARG')
      @country2.save
      @country3 = Country.new(name: 'America', cod: 'USA')
      @country3.save
    
      @city1 = City.new(name: 'BogotÃ¡', country_id: @country1.id)
      @city1.save
      @city2 = City.new(name: 'Buenos Aires', country_id: @country2.id)
      @city2.save
      @city3 = City.new(name: 'Miami', country_id: @country3.id)
      @city3.save
    
      @role1 = Role.new(name: 'student')
      @role1.save
      @role2 = Role.new(name: 'tutor')
      @role2.save
      @role3 = Role.new(name: 'administrator')
      @role3.save
    
    
      @subject1 = Subject.new(name: 'spanish')
      @subject1.save
      @subject2 = Subject.new(name: 'english')
      @subject2.save
    
      @user1 = User.create(name: 'a1', email: 'a1@a1.com', password: '12345678', password_confirmation: '12345678', role_id:1, city_id:1)
      @user1.save
      @user2 = User.create(name: 'a2', email: 'a2@a2.com', password: '12345678', password_confirmation: '12345678', role_id:1, city_id:1)
      @user2.save
      @user3 = User.create(name: 'a3', email: 'a3@a3.com', password: '12345678', password_confirmation: '12345678', role_id:1, city_id:2)
      @user3.save
      @user4 = User.create(name: 'a4', email: 'a4@a4.com', password: '12345678', password_confirmation: '12345678', role_id:1, city_id:2)
      @user4.save
      @tutor1 = User.create(name: 'b1', email: 'b1@b1.com', password: 'asdf1234', password_confirmation: 'asdf1234', role_id:2, city_id:1)
      @tutor1.save
      @tutor2 = User.create(name: 'b2', email: 'b2@b2.com', password: 'asdf1234', password_confirmation: 'asdf1234', role_id:2, city_id:1)
      @tutor2.save
      @tutor3 = User.create(name: 'b3', email: 'b3@b3.com', password: 'asdf1234', password_confirmation: 'asdf1234', role_id:2, city_id:2)
      @tutor3.save
      @tutor4 = User.create(name: 'b4', email: 'b4@b4.com', password: 'asdf1234', password_confirmation: 'asdf1234', role_id:2, city_id:2)
      @tutor4.save

      @userSubject1 = UserSubject.new(user_id: 5, subject_id: 1)
      @userSubject1.save
      @userSubject2 = UserSubject.new(user_id: 6, subject_id: 1)
      @userSubject2.save
      @userSubject3 = UserSubject.new(user_id: 7, subject_id: 1)
      @userSubject3.save
      @userSubject4 = UserSubject.new(user_id: 8, subject_id: 1)
      @userSubject4.save
      @lesson1 = Lesson.new(user_id: 1, tutor_id: 5, day: Date.today+1.months, begin_hour: 10, finish_hour: 12, city_id: 2, subject_id: 1) 
      @lesson1.save
  }
  
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
